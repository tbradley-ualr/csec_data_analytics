import json

from rest_framework.templatetags.rest_framework import data
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from drf_spectacular.utils import extend_schema, OpenApiParameter

from csec_data_analytics_app.serializers.serializers_vulnerability import VulnerabilitySerializer
from csec_data_analytics_app.models import Vulnerability

class VulnerabilityList(APIView):

    @extend_schema(
        responses={200: VulnerabilitySerializer(many=True)},
        description="Get vulnerability objects from the database"
    )
    def get(self, request, *args, **kwargs):
        #Handle GET request
        vulnerability_objects = Vulnerability.objects.all()
        vulnerability_serialized = VulnerabilitySerializer(vulnerability_objects, many=True)
        return Response(vulnerability_serialized.data, status=status.HTTP_200_OK)

    @extend_schema(
        request=VulnerabilitySerializer,
        responses={201: VulnerabilitySerializer},
        description="Create a new vulnerability object"
    )
    def post(self, request):
        serializer = VulnerabilitySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class VulnerabilityDetail(APIView):

    def get_object(self, cve_id):
        try:
            return Vulnerability.objects.get(cve_id=cve_id)
        except Vulnerability.DoesNotExist:
            return Response({"error": "Not Found"}, status=status.HTTP_404_NOT_FOUND)

    def get(self, request, cve_id):
        vulnerability = self.get_object(cve_id)
        if vulnerability:
            serializer = VulnerabilitySerializer(vulnerability)
            return Response(serializer.data, status=status.HTTP_200_OK)

    def put(self, request, cve_id):
        #Handle PUT request
        vulnerability = self.get_object(cve_id)
        if vulnerability:
            serializer = VulnerabilitySerializer(vulnerability, data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, cve_id):
        vulnerability = self.get_object(cve_id)
        if vulnerability:
            vulnerability.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        return Response({"error": "Not Found"}, status=status.HTTP_404_NOT_FOUND)

